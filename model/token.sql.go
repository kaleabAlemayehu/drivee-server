// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: token.sql

package model

import (
	"context"

	"github.com/google/uuid"
)

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM token WHERE token=$1 AND user_id =$2
`

type DeleteTokenParams struct {
	Token  string    `json:"token"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteToken(ctx context.Context, arg DeleteTokenParams) error {
	_, err := q.db.Exec(ctx, deleteToken, arg.Token, arg.UserID)
	return err
}

const getToken = `-- name: GetToken :one
SELECT token, expires_at, user_id FROM token WHERE token = $1 AND expires_at > $2
`

type GetTokenParams struct {
	Token     string `json:"token"`
	ExpiresAt int32  `json:"expires_at"`
}

func (q *Queries) GetToken(ctx context.Context, arg GetTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, getToken, arg.Token, arg.ExpiresAt)
	var i Token
	err := row.Scan(&i.Token, &i.ExpiresAt, &i.UserID)
	return i, err
}

const insertToken = `-- name: InsertToken :one
INSERT INTO token(token ,expires_at ,user_id ) VAlUES ($1, $2, $3) RETURNING token, expires_at, user_id
`

type InsertTokenParams struct {
	Token     string    `json:"token"`
	ExpiresAt int32     `json:"expires_at"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) InsertToken(ctx context.Context, arg InsertTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, insertToken, arg.Token, arg.ExpiresAt, arg.UserID)
	var i Token
	err := row.Scan(&i.Token, &i.ExpiresAt, &i.UserID)
	return i, err
}
