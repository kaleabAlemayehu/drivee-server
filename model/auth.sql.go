// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package model

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, middle_name, last_name, email, password, profile_picture FROM users WHERE email = $1 LIMIT 1
`

type GetUserByEmailRow struct {
	ID             uuid.UUID   `json:"id"`
	FirstName      string      `json:"first_name"`
	MiddleName     pgtype.Text `json:"middle_name"`
	LastName       pgtype.Text `json:"last_name"`
	Email          string      `json:"email"`
	Password       pgtype.Text `json:"password"`
	ProfilePicture string      `json:"profile_picture"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.ProfilePicture,
	)
	return i, err
}

const updateUserPasswordByID = `-- name: UpdateUserPasswordByID :exec
UPDATE users  set password = $2 WHERE id = $1
`

type UpdateUserPasswordByIDParams struct {
	ID       uuid.UUID   `json:"id"`
	Password pgtype.Text `json:"password"`
}

func (q *Queries) UpdateUserPasswordByID(ctx context.Context, arg UpdateUserPasswordByIDParams) error {
	_, err := q.db.Exec(ctx, updateUserPasswordByID, arg.ID, arg.Password)
	return err
}
