// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: payments.sql

package model

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getPayment = `-- name: GetPayment :one
SELECT id, booking_id, renter_id, owner_id, amount, payment_status, payment_method, transaction_id FROM payments WHERE id=$1
`

type GetPaymentRow struct {
	ID            uuid.UUID      `json:"id"`
	BookingID     uuid.UUID      `json:"booking_id"`
	RenterID      uuid.UUID      `json:"renter_id"`
	OwnerID       uuid.UUID      `json:"owner_id"`
	Amount        pgtype.Numeric `json:"amount"`
	PaymentStatus PaymentStatus  `json:"payment_status"`
	PaymentMethod PaymentMethod  `json:"payment_method"`
	TransactionID string         `json:"transaction_id"`
}

func (q *Queries) GetPayment(ctx context.Context, id uuid.UUID) (GetPaymentRow, error) {
	row := q.db.QueryRow(ctx, getPayment, id)
	var i GetPaymentRow
	err := row.Scan(
		&i.ID,
		&i.BookingID,
		&i.RenterID,
		&i.OwnerID,
		&i.Amount,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.TransactionID,
	)
	return i, err
}

const insertPayment = `-- name: InsertPayment :one
INSERT INTO payments(booking_id, renter_id, owner_id, amount, payment_status, payment_method, transaction_id) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, booking_id, renter_id, owner_id, amount, payment_status, payment_method, transaction_id, created_at, updated_at
`

type InsertPaymentParams struct {
	BookingID     uuid.UUID      `json:"booking_id"`
	RenterID      uuid.UUID      `json:"renter_id"`
	OwnerID       uuid.UUID      `json:"owner_id"`
	Amount        pgtype.Numeric `json:"amount"`
	PaymentStatus PaymentStatus  `json:"payment_status"`
	PaymentMethod PaymentMethod  `json:"payment_method"`
	TransactionID string         `json:"transaction_id"`
}

func (q *Queries) InsertPayment(ctx context.Context, arg InsertPaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, insertPayment,
		arg.BookingID,
		arg.RenterID,
		arg.OwnerID,
		arg.Amount,
		arg.PaymentStatus,
		arg.PaymentMethod,
		arg.TransactionID,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.BookingID,
		&i.RenterID,
		&i.OwnerID,
		&i.Amount,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.TransactionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPayments = `-- name: ListPayments :many
SELECT id, booking_id, renter_id, owner_id, amount, payment_status, payment_method, transaction_id FROM payments ORDER BY created_at
`

type ListPaymentsRow struct {
	ID            uuid.UUID      `json:"id"`
	BookingID     uuid.UUID      `json:"booking_id"`
	RenterID      uuid.UUID      `json:"renter_id"`
	OwnerID       uuid.UUID      `json:"owner_id"`
	Amount        pgtype.Numeric `json:"amount"`
	PaymentStatus PaymentStatus  `json:"payment_status"`
	PaymentMethod PaymentMethod  `json:"payment_method"`
	TransactionID string         `json:"transaction_id"`
}

func (q *Queries) ListPayments(ctx context.Context) ([]ListPaymentsRow, error) {
	rows, err := q.db.Query(ctx, listPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPaymentsRow
	for rows.Next() {
		var i ListPaymentsRow
		if err := rows.Scan(
			&i.ID,
			&i.BookingID,
			&i.RenterID,
			&i.OwnerID,
			&i.Amount,
			&i.PaymentStatus,
			&i.PaymentMethod,
			&i.TransactionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayment = `-- name: UpdatePayment :one
UPDATE payments SET payment_status = $2  WHERE id = $1 RETURNING id, booking_id, renter_id, owner_id, amount, payment_status, payment_method, transaction_id, created_at, updated_at
`

type UpdatePaymentParams struct {
	ID            uuid.UUID     `json:"id"`
	PaymentStatus PaymentStatus `json:"payment_status"`
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, updatePayment, arg.ID, arg.PaymentStatus)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.BookingID,
		&i.RenterID,
		&i.OwnerID,
		&i.Amount,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.TransactionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
