// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package model

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getUser = `-- name: GetUser :one
SELECT id, first_name, middle_name, last_name, email, password, driver_license, is_owner, is_renter, phone_number, account_number, bank_name FROM users
WHERE id = $1 LIMIT 1
`

type GetUserRow struct {
	ID            uuid.UUID   `json:"id"`
	FirstName     string      `json:"first_name"`
	MiddleName    pgtype.Text `json:"middle_name"`
	LastName      string      `json:"last_name"`
	Email         string      `json:"email"`
	Password      string      `json:"password"`
	DriverLicense string      `json:"driver_license"`
	IsOwner       pgtype.Bool `json:"is_owner"`
	IsRenter      pgtype.Bool `json:"is_renter"`
	PhoneNumber   string      `json:"phone_number"`
	AccountNumber string      `json:"account_number"`
	BankName      string      `json:"bank_name"`
}

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.DriverLicense,
		&i.IsOwner,
		&i.IsRenter,
		&i.PhoneNumber,
		&i.AccountNumber,
		&i.BankName,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (first_name, middle_name, last_name, email, password, driver_license, phone_number, account_number, bank_name)
VALUES ( $1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, first_name, middle_name, last_name, email, password, driver_license, phone_number, account_number, bank_name, is_owner, is_renter, created_at, updated_at
`

type InsertUserParams struct {
	FirstName     string      `json:"first_name"`
	MiddleName    pgtype.Text `json:"middle_name"`
	LastName      string      `json:"last_name"`
	Email         string      `json:"email"`
	Password      string      `json:"password"`
	DriverLicense string      `json:"driver_license"`
	PhoneNumber   string      `json:"phone_number"`
	AccountNumber string      `json:"account_number"`
	BankName      string      `json:"bank_name"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.DriverLicense,
		arg.PhoneNumber,
		arg.AccountNumber,
		arg.BankName,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.DriverLicense,
		&i.PhoneNumber,
		&i.AccountNumber,
		&i.BankName,
		&i.IsOwner,
		&i.IsRenter,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT id, first_name, middle_name, last_name, email, driver_license, is_owner, is_renter, phone_number,account_number, bank_name FROM users
ORDER BY email
`

type ListUserRow struct {
	ID            uuid.UUID   `json:"id"`
	FirstName     string      `json:"first_name"`
	MiddleName    pgtype.Text `json:"middle_name"`
	LastName      string      `json:"last_name"`
	Email         string      `json:"email"`
	DriverLicense string      `json:"driver_license"`
	IsOwner       pgtype.Bool `json:"is_owner"`
	IsRenter      pgtype.Bool `json:"is_renter"`
	PhoneNumber   string      `json:"phone_number"`
	AccountNumber string      `json:"account_number"`
	BankName      string      `json:"bank_name"`
}

func (q *Queries) ListUser(ctx context.Context) ([]ListUserRow, error) {
	rows, err := q.db.Query(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserRow
	for rows.Next() {
		var i ListUserRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Email,
			&i.DriverLicense,
			&i.IsOwner,
			&i.IsRenter,
			&i.PhoneNumber,
			&i.AccountNumber,
			&i.BankName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET first_name = $2, middle_name = $3, last_name = $4, email = $5, password = $6, phone_number = $7, account_number = $8, bank_name = $9, driver_license= $10, is_owner=$11, is_renter=$12 WHERE  id = $1
RETURNING id, first_name, middle_name, last_name, email, password, driver_license, phone_number, account_number, bank_name, is_owner, is_renter, created_at, updated_at
`

type UpdateUserParams struct {
	ID            uuid.UUID   `json:"id"`
	FirstName     string      `json:"first_name"`
	MiddleName    pgtype.Text `json:"middle_name"`
	LastName      string      `json:"last_name"`
	Email         string      `json:"email"`
	Password      string      `json:"password"`
	PhoneNumber   string      `json:"phone_number"`
	AccountNumber string      `json:"account_number"`
	BankName      string      `json:"bank_name"`
	DriverLicense string      `json:"driver_license"`
	IsOwner       pgtype.Bool `json:"is_owner"`
	IsRenter      pgtype.Bool `json:"is_renter"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.PhoneNumber,
		arg.AccountNumber,
		arg.BankName,
		arg.DriverLicense,
		arg.IsOwner,
		arg.IsRenter,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.DriverLicense,
		&i.PhoneNumber,
		&i.AccountNumber,
		&i.BankName,
		&i.IsOwner,
		&i.IsRenter,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
