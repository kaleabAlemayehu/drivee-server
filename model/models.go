// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package model

import (
	"database/sql/driver"
	"fmt"

	go_postgis "github.com/cridenour/go-postgis"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type BookingStatus string

const (
	BookingStatusPending   BookingStatus = "pending"
	BookingStatusConfirmed BookingStatus = "confirmed"
	BookingStatusCanceled  BookingStatus = "canceled"
	BookingStatusCompleted BookingStatus = "completed"
)

func (e *BookingStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BookingStatus(s)
	case string:
		*e = BookingStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BookingStatus: %T", src)
	}
	return nil
}

type NullBookingStatus struct {
	BookingStatus BookingStatus `json:"booking_status"`
	Valid         bool          `json:"valid"` // Valid is true if BookingStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBookingStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BookingStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BookingStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBookingStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BookingStatus), nil
}

type FuelType string

const (
	FuelTypeGas      FuelType = "gas"
	FuelTypeDiesel   FuelType = "diesel"
	FuelTypeElectric FuelType = "electric"
	FuelTypeHybrid   FuelType = "hybrid"
)

func (e *FuelType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FuelType(s)
	case string:
		*e = FuelType(s)
	default:
		return fmt.Errorf("unsupported scan type for FuelType: %T", src)
	}
	return nil
}

type NullFuelType struct {
	FuelType FuelType `json:"fuel_type"`
	Valid    bool     `json:"valid"` // Valid is true if FuelType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFuelType) Scan(value interface{}) error {
	if value == nil {
		ns.FuelType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FuelType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFuelType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FuelType), nil
}

type StatusType string

const (
	StatusTypeAvaliable StatusType = "avaliable"
	StatusTypeRented    StatusType = "rented"
	StatusTypeInactive  StatusType = "inactive"
)

func (e *StatusType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StatusType(s)
	case string:
		*e = StatusType(s)
	default:
		return fmt.Errorf("unsupported scan type for StatusType: %T", src)
	}
	return nil
}

type NullStatusType struct {
	StatusType StatusType `json:"status_type"`
	Valid      bool       `json:"valid"` // Valid is true if StatusType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatusType) Scan(value interface{}) error {
	if value == nil {
		ns.StatusType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StatusType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatusType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StatusType), nil
}

type Transmission string

const (
	TransmissionManual    Transmission = "manual"
	TransmissionAutomatic Transmission = "automatic"
)

func (e *Transmission) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Transmission(s)
	case string:
		*e = Transmission(s)
	default:
		return fmt.Errorf("unsupported scan type for Transmission: %T", src)
	}
	return nil
}

type NullTransmission struct {
	Transmission Transmission `json:"transmission"`
	Valid        bool         `json:"valid"` // Valid is true if Transmission is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransmission) Scan(value interface{}) error {
	if value == nil {
		ns.Transmission, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Transmission.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransmission) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Transmission), nil
}

type Booking struct {
	ID         uuid.UUID        `json:"id"`
	CarID      uuid.UUID        `json:"car_id"`
	RenterID   uuid.UUID        `json:"renter_id"`
	StartTime  pgtype.Timestamp `json:"start_time"`
	EndTime    pgtype.Timestamp `json:"end_time"`
	TotalPrice pgtype.Numeric   `json:"total_price"`
	Status     BookingStatus    `json:"status"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

type Car struct {
	ID           uuid.UUID         `json:"id"`
	OwnerID      uuid.UUID         `json:"owner_id"`
	Make         string            `json:"make"`
	Model        string            `json:"model"`
	Year         string            `json:"year"`
	LicensePlate string            `json:"license_plate"`
	VinNumber    string            `json:"vin_number"`
	Transmission Transmission      `json:"transmission"`
	FuelType     FuelType          `json:"fuel_type"`
	Mileage      int32             `json:"mileage"`
	Location     go_postgis.PointS `json:"location"`
	PricePerHour pgtype.Numeric    `json:"price_per_hour"`
	Status       StatusType        `json:"status"`
	CreatedAt    pgtype.Timestamp  `json:"created_at"`
	UpdatedAt    pgtype.Timestamp  `json:"updated_at"`
}

type User struct {
	ID            uuid.UUID        `json:"id"`
	FirstName     string           `json:"first_name"`
	MiddleName    pgtype.Text      `json:"middle_name"`
	LastName      string           `json:"last_name"`
	Email         string           `json:"email"`
	Password      string           `json:"password"`
	DriverLicense string           `json:"driver_license"`
	PhoneNumber   string           `json:"phone_number"`
	AccountNumber string           `json:"account_number"`
	BankName      string           `json:"bank_name"`
	IsOwner       pgtype.Bool      `json:"is_owner"`
	IsRenter      pgtype.Bool      `json:"is_renter"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
}
