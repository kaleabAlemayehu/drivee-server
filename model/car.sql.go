// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: car.sql

package model

import (
	"context"

	go_postgis "github.com/cridenour/go-postgis"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getCar = `-- name: GetCar :one
SELECT id, owner_id, thumbnail_picture,make, description, model, year, license_plate, vin_number, transmission, fuel_type, mileage, location, price_per_hour, status FROM cars WHERE id = $1 LIMIT 1
`

type GetCarRow struct {
	ID               uuid.UUID         `json:"id"`
	OwnerID          uuid.UUID         `json:"owner_id"`
	ThumbnailPicture string            `json:"thumbnail_picture"`
	Make             string            `json:"make"`
	Description      string            `json:"description"`
	Model            string            `json:"model"`
	Year             string            `json:"year"`
	LicensePlate     string            `json:"license_plate"`
	VinNumber        string            `json:"vin_number"`
	Transmission     Transmission      `json:"transmission"`
	FuelType         FuelType          `json:"fuel_type"`
	Mileage          int32             `json:"mileage"`
	Location         go_postgis.PointS `json:"location"`
	PricePerHour     pgtype.Numeric    `json:"price_per_hour"`
	Status           StatusType        `json:"status"`
}

func (q *Queries) GetCar(ctx context.Context, id uuid.UUID) (GetCarRow, error) {
	row := q.db.QueryRow(ctx, getCar, id)
	var i GetCarRow
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ThumbnailPicture,
		&i.Make,
		&i.Description,
		&i.Model,
		&i.Year,
		&i.LicensePlate,
		&i.VinNumber,
		&i.Transmission,
		&i.FuelType,
		&i.Mileage,
		&i.Location,
		&i.PricePerHour,
		&i.Status,
	)
	return i, err
}

const insertCar = `-- name: InsertCar :one
INSERT INTO cars( owner_id, make, model, year, license_plate, vin_number, transmission, fuel_type, mileage, location, price_per_hour, status, thumbnail_picture,description ) VALUES ( $1, $2, $3, $4, $5, $6, $7, $8, $9, ST_SetSRID(ST_MakePoint($10, $11), 4326), $12, $13, $14 , $15) RETURNING id, owner_id, thumbnail_picture, description, make, model, year, license_plate, vin_number, transmission, fuel_type, mileage, location, price_per_hour, status, created_at, updated_at
`

type InsertCarParams struct {
	OwnerID          uuid.UUID      `json:"owner_id"`
	Make             string         `json:"make"`
	Model            string         `json:"model"`
	Year             string         `json:"year"`
	LicensePlate     string         `json:"license_plate"`
	VinNumber        string         `json:"vin_number"`
	Transmission     Transmission   `json:"transmission"`
	FuelType         FuelType       `json:"fuel_type"`
	Mileage          int32          `json:"mileage"`
	StMakepoint      interface{}    `json:"st_makepoint"`
	StMakepoint_2    interface{}    `json:"st_makepoint_2"`
	PricePerHour     pgtype.Numeric `json:"price_per_hour"`
	Status           StatusType     `json:"status"`
	ThumbnailPicture string         `json:"thumbnail_picture"`
	Description      string         `json:"description"`
}

func (q *Queries) InsertCar(ctx context.Context, arg InsertCarParams) (Car, error) {
	row := q.db.QueryRow(ctx, insertCar,
		arg.OwnerID,
		arg.Make,
		arg.Model,
		arg.Year,
		arg.LicensePlate,
		arg.VinNumber,
		arg.Transmission,
		arg.FuelType,
		arg.Mileage,
		arg.StMakepoint,
		arg.StMakepoint_2,
		arg.PricePerHour,
		arg.Status,
		arg.ThumbnailPicture,
		arg.Description,
	)
	var i Car
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ThumbnailPicture,
		&i.Description,
		&i.Make,
		&i.Model,
		&i.Year,
		&i.LicensePlate,
		&i.VinNumber,
		&i.Transmission,
		&i.FuelType,
		&i.Mileage,
		&i.Location,
		&i.PricePerHour,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCars = `-- name: ListCars :many

SELECT id, owner_id, thumbnail_picture, description, make, model, year, license_plate, vin_number, transmission,fuel_type, mileage, location, price_per_hour, status FROM cars ORDER BY year
`

type ListCarsRow struct {
	ID               uuid.UUID         `json:"id"`
	OwnerID          uuid.UUID         `json:"owner_id"`
	ThumbnailPicture string            `json:"thumbnail_picture"`
	Description      string            `json:"description"`
	Make             string            `json:"make"`
	Model            string            `json:"model"`
	Year             string            `json:"year"`
	LicensePlate     string            `json:"license_plate"`
	VinNumber        string            `json:"vin_number"`
	Transmission     Transmission      `json:"transmission"`
	FuelType         FuelType          `json:"fuel_type"`
	Mileage          int32             `json:"mileage"`
	Location         go_postgis.PointS `json:"location"`
	PricePerHour     pgtype.Numeric    `json:"price_per_hour"`
	Status           StatusType        `json:"status"`
}

// TODO: will add pagenation using LIMIT and OFFSET
func (q *Queries) ListCars(ctx context.Context) ([]ListCarsRow, error) {
	rows, err := q.db.Query(ctx, listCars)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCarsRow
	for rows.Next() {
		var i ListCarsRow
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.ThumbnailPicture,
			&i.Description,
			&i.Make,
			&i.Model,
			&i.Year,
			&i.LicensePlate,
			&i.VinNumber,
			&i.Transmission,
			&i.FuelType,
			&i.Mileage,
			&i.Location,
			&i.PricePerHour,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCar = `-- name: UpdateCar :one
UPDATE cars SET mileage = $3, location = ST_SetSRID(ST_MakePoint($4, $5), 4326), price_per_hour = $6, status = $7 WHERE id = $1 AND owner_id = $2 RETURNING id, owner_id, thumbnail_picture, description, make, model, year, license_plate, vin_number, transmission, fuel_type, mileage, location, price_per_hour, status, created_at, updated_at
`

type UpdateCarParams struct {
	ID            uuid.UUID      `json:"id"`
	OwnerID       uuid.UUID      `json:"owner_id"`
	Mileage       int32          `json:"mileage"`
	StMakepoint   interface{}    `json:"st_makepoint"`
	StMakepoint_2 interface{}    `json:"st_makepoint_2"`
	PricePerHour  pgtype.Numeric `json:"price_per_hour"`
	Status        StatusType     `json:"status"`
}

func (q *Queries) UpdateCar(ctx context.Context, arg UpdateCarParams) (Car, error) {
	row := q.db.QueryRow(ctx, updateCar,
		arg.ID,
		arg.OwnerID,
		arg.Mileage,
		arg.StMakepoint,
		arg.StMakepoint_2,
		arg.PricePerHour,
		arg.Status,
	)
	var i Car
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ThumbnailPicture,
		&i.Description,
		&i.Make,
		&i.Model,
		&i.Year,
		&i.LicensePlate,
		&i.VinNumber,
		&i.Transmission,
		&i.FuelType,
		&i.Mileage,
		&i.Location,
		&i.PricePerHour,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
