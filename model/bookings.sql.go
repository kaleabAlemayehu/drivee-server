// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bookings.sql

package model

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const listBookings = `-- name: ListBookings :many
SELECT id, car_id, renter_id, start_time, end_time, total_price, status FROM bookings ORDER BY start_time
`

type ListBookingsRow struct {
	ID         uuid.UUID        `json:"id"`
	CarID      uuid.UUID        `json:"car_id"`
	RenterID   uuid.UUID        `json:"renter_id"`
	StartTime  pgtype.Timestamp `json:"start_time"`
	EndTime    pgtype.Timestamp `json:"end_time"`
	TotalPrice pgtype.Numeric   `json:"total_price"`
	Status     BookingStatus    `json:"status"`
}

func (q *Queries) ListBookings(ctx context.Context) ([]ListBookingsRow, error) {
	rows, err := q.db.Query(ctx, listBookings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBookingsRow
	for rows.Next() {
		var i ListBookingsRow
		if err := rows.Scan(
			&i.ID,
			&i.CarID,
			&i.RenterID,
			&i.StartTime,
			&i.EndTime,
			&i.TotalPrice,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
