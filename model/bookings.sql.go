// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: bookings.sql

package model

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getBookingForOwner = `-- name: GetBookingForOwner :one
SELECT b.id AS booking_id, b.car_id, b.renter_id, b.start_time, b.end_time, b.total_price, b.status 
	FROM bookings b JOIN cars c ON b.car_id = c.id
	JOIN users u ON b.renter_id = u.id WHERE c.owner_id = $2 AND b.id=$1
`

type GetBookingForOwnerParams struct {
	ID      uuid.UUID `json:"id"`
	OwnerID uuid.UUID `json:"owner_id"`
}

type GetBookingForOwnerRow struct {
	BookingID  uuid.UUID        `json:"booking_id"`
	CarID      uuid.UUID        `json:"car_id"`
	RenterID   uuid.UUID        `json:"renter_id"`
	StartTime  pgtype.Timestamp `json:"start_time"`
	EndTime    pgtype.Timestamp `json:"end_time"`
	TotalPrice pgtype.Numeric   `json:"total_price"`
	Status     BookingStatus    `json:"status"`
}

func (q *Queries) GetBookingForOwner(ctx context.Context, arg GetBookingForOwnerParams) (GetBookingForOwnerRow, error) {
	row := q.db.QueryRow(ctx, getBookingForOwner, arg.ID, arg.OwnerID)
	var i GetBookingForOwnerRow
	err := row.Scan(
		&i.BookingID,
		&i.CarID,
		&i.RenterID,
		&i.StartTime,
		&i.EndTime,
		&i.TotalPrice,
		&i.Status,
	)
	return i, err
}

const getBookingForRenter = `-- name: GetBookingForRenter :one
SELECT id, car_id, renter_id, start_time, end_time, total_price, status FROM bookings WHERE id=$1 AND renter_id =$2
`

type GetBookingForRenterParams struct {
	ID       uuid.UUID `json:"id"`
	RenterID uuid.UUID `json:"renter_id"`
}

type GetBookingForRenterRow struct {
	ID         uuid.UUID        `json:"id"`
	CarID      uuid.UUID        `json:"car_id"`
	RenterID   uuid.UUID        `json:"renter_id"`
	StartTime  pgtype.Timestamp `json:"start_time"`
	EndTime    pgtype.Timestamp `json:"end_time"`
	TotalPrice pgtype.Numeric   `json:"total_price"`
	Status     BookingStatus    `json:"status"`
}

func (q *Queries) GetBookingForRenter(ctx context.Context, arg GetBookingForRenterParams) (GetBookingForRenterRow, error) {
	row := q.db.QueryRow(ctx, getBookingForRenter, arg.ID, arg.RenterID)
	var i GetBookingForRenterRow
	err := row.Scan(
		&i.ID,
		&i.CarID,
		&i.RenterID,
		&i.StartTime,
		&i.EndTime,
		&i.TotalPrice,
		&i.Status,
	)
	return i, err
}

const insertBooking = `-- name: InsertBooking :one
INSERT INTO bookings( car_id, renter_id, start_time, end_time, total_price) VALUES ($1, $2, $3, $4, $5) RETURNING id, car_id, renter_id, start_time, end_time, total_price, status, created_at, updated_at
`

type InsertBookingParams struct {
	CarID      uuid.UUID        `json:"car_id"`
	RenterID   uuid.UUID        `json:"renter_id"`
	StartTime  pgtype.Timestamp `json:"start_time"`
	EndTime    pgtype.Timestamp `json:"end_time"`
	TotalPrice pgtype.Numeric   `json:"total_price"`
}

func (q *Queries) InsertBooking(ctx context.Context, arg InsertBookingParams) (Booking, error) {
	row := q.db.QueryRow(ctx, insertBooking,
		arg.CarID,
		arg.RenterID,
		arg.StartTime,
		arg.EndTime,
		arg.TotalPrice,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.CarID,
		&i.RenterID,
		&i.StartTime,
		&i.EndTime,
		&i.TotalPrice,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBookingsForOwner = `-- name: ListBookingsForOwner :many
SELECT b.id AS booking_id, b.car_id, b.renter_id, b.start_time, b.end_time, b.total_price, b.status 
	FROM bookings b JOIN cars c ON b.car_id = c.id
	JOIN users u ON b.renter_id = u.id WHERE c.owner_id = $1
`

type ListBookingsForOwnerRow struct {
	BookingID  uuid.UUID        `json:"booking_id"`
	CarID      uuid.UUID        `json:"car_id"`
	RenterID   uuid.UUID        `json:"renter_id"`
	StartTime  pgtype.Timestamp `json:"start_time"`
	EndTime    pgtype.Timestamp `json:"end_time"`
	TotalPrice pgtype.Numeric   `json:"total_price"`
	Status     BookingStatus    `json:"status"`
}

func (q *Queries) ListBookingsForOwner(ctx context.Context, ownerID uuid.UUID) ([]ListBookingsForOwnerRow, error) {
	rows, err := q.db.Query(ctx, listBookingsForOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBookingsForOwnerRow
	for rows.Next() {
		var i ListBookingsForOwnerRow
		if err := rows.Scan(
			&i.BookingID,
			&i.CarID,
			&i.RenterID,
			&i.StartTime,
			&i.EndTime,
			&i.TotalPrice,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBookingsForRenter = `-- name: ListBookingsForRenter :many
SELECT id, car_id, renter_id, start_time, end_time, total_price, status FROM bookings WHERE renter_id=$1 ORDER BY start_time
`

type ListBookingsForRenterRow struct {
	ID         uuid.UUID        `json:"id"`
	CarID      uuid.UUID        `json:"car_id"`
	RenterID   uuid.UUID        `json:"renter_id"`
	StartTime  pgtype.Timestamp `json:"start_time"`
	EndTime    pgtype.Timestamp `json:"end_time"`
	TotalPrice pgtype.Numeric   `json:"total_price"`
	Status     BookingStatus    `json:"status"`
}

func (q *Queries) ListBookingsForRenter(ctx context.Context, renterID uuid.UUID) ([]ListBookingsForRenterRow, error) {
	rows, err := q.db.Query(ctx, listBookingsForRenter, renterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBookingsForRenterRow
	for rows.Next() {
		var i ListBookingsForRenterRow
		if err := rows.Scan(
			&i.ID,
			&i.CarID,
			&i.RenterID,
			&i.StartTime,
			&i.EndTime,
			&i.TotalPrice,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookingForOwner = `-- name: UpdateBookingForOwner :one
UPDATE bookings b SET status = $3  FROM cars c WHERE b.car_id = c.id AND c.owner_id = $2 AND b.id = $1 RETURNING b.id, b.car_id, b.renter_id, b.start_time, b.end_time, b.total_price, b.status, b.created_at, b.updated_at
`

type UpdateBookingForOwnerParams struct {
	ID      uuid.UUID     `json:"id"`
	OwnerID uuid.UUID     `json:"owner_id"`
	Status  BookingStatus `json:"status"`
}

func (q *Queries) UpdateBookingForOwner(ctx context.Context, arg UpdateBookingForOwnerParams) (Booking, error) {
	row := q.db.QueryRow(ctx, updateBookingForOwner, arg.ID, arg.OwnerID, arg.Status)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.CarID,
		&i.RenterID,
		&i.StartTime,
		&i.EndTime,
		&i.TotalPrice,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBookingForRenter = `-- name: UpdateBookingForRenter :one
UPDATE bookings SET start_time = $3, end_time = $4, total_price = $5 , status='pending' WHERE id = $1 AND renter_id = $2 RETURNING id, car_id, renter_id, start_time, end_time, total_price, status, created_at, updated_at
`

type UpdateBookingForRenterParams struct {
	ID         uuid.UUID        `json:"id"`
	RenterID   uuid.UUID        `json:"renter_id"`
	StartTime  pgtype.Timestamp `json:"start_time"`
	EndTime    pgtype.Timestamp `json:"end_time"`
	TotalPrice pgtype.Numeric   `json:"total_price"`
}

func (q *Queries) UpdateBookingForRenter(ctx context.Context, arg UpdateBookingForRenterParams) (Booking, error) {
	row := q.db.QueryRow(ctx, updateBookingForRenter,
		arg.ID,
		arg.RenterID,
		arg.StartTime,
		arg.EndTime,
		arg.TotalPrice,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.CarID,
		&i.RenterID,
		&i.StartTime,
		&i.EndTime,
		&i.TotalPrice,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
